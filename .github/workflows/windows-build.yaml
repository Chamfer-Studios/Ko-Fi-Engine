# Name of the workflow
name: Windows-Release
#when a push, pull request or release of type published is done
on:
  push:
  pull_request:
  release:
    types: [published]
#do the following jobs
jobs:
  create-folders:
    runs-on: windows-latest #run on the latest version of windows
    env:
      RELEASE_NAME: Ko-Fi_Engine #setting up the release name variable to use later in the workflow
      GNUTARGET: default
    steps: #steps that we want to perform
    #Step 1: perform a checkout
    - name: Checkout 
      uses: actions/checkout@master
      with:
        ref: compileGame
    #Step 2: Set up the release, we add the release name to the github env
    - name: Setup Release Version
      run: |
        echo "RELEASE_NAME=Ko-Fi_Engine_${{ github.event.release.tag_name }}" >> $GITHUB_ENV
      shell: bash
      if: github.event_name == 'release' && github.event.action == 'published' #only perform this if a release commit is pushed or if the action published is performed
    #Step 3: Set up the build directory to use later on the building process
    - name: Setup environment
    #We start at the repo directory -> we create a build directory->we go into build and create a directory with our RELEASE_NAME->we go back to the repo directory
      run: |
        mkdir build 
        cd build
        mkdir ${{env.RELEASE_NAME}}
        cd ${{env.RELEASE_NAME}}
        mkdir ${{env.RELEASE_NAME}}
        cd "../../../Ko-Fi-Engine"
        dir
    #set up msbuild in the action to be used
    - name: SetUp MSBuild
      uses: microsoft/setup-msbuild@v1.1
    #compile the exe
    - name: Build Solution (MSVC16)
      run: |
        cd "Ko-Fi Engine"
        dir
        msbuild.exe "Ko-Fi Engine.vcxproj" -maxcpucount:2
        copy /Y "Release\Ko-Fi Engine.exe" "build\${{env.RELEASE_NAME}}\"
      shell: cmd
    - name: Generate Artifacts
      run: |
        robocopy ".\Ko-Fi Engine\Ko-Fi" .\build\${{ env.RELEASE_NAME }}\${{ env.RELEASE_NAME }} /S
        copy /Y .\README.md .\build\${{env.RELEASE_NAME}}\README.md
        copy /Y .\LICENSE .build\${{env.RELEASE_NAME}}\LICENSE
        cd build
        7z a ./${{env.RELEASE_NAME}}.zip ./${{env.RELEASE_NAME}}
        cd ../
      shell: cmd
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.RELEASE_NAME }}
        path: ./build/${{ env.RELEASE_NAME }}.zip

